
:Author:    Skyline-ch
:Email:     <skyline-ch@play-4-fun.net>
:Date:      29.06.2015
:Revision:  1.195.0

== Intro
Le plugin widget est un plugin un peu particulier, car il ne permet pas de crée des équipements mais de modifier le rendu (affichage) d’une commande, l'objectif de se Plugin c'est donc de permettre de personnaliser simplement la façon d'afficher une valeurs, infos, ou action en fonction de ses goûts et désires.

Depuis la version 1.112 de Jeedom, il est possible de personnaliser les widgets avec des options spécifique (créer par le développeur du widget), ont peux donc avoir un widget qui s'affichera différemment d'une commande à l'autre.

Ainsi ont peux avoir un même widget écris en bleu sur une commande et en vert sur une autre.


.Terminologie
[NOTE]
===============================
Widget et Tuile, à ne pas confondre.

Le widget, c'est la partie qui va se charger de mettre en forme et afficher une infos ou commande, un widget ne doit s'occuper que d'une seul commande ou infos.

La Tuile, c'est un regroupement de widget pour un module, c'est la zone dans laquelle va s'afficher les divers widgets appliqué aux commandes et infos du module.
===============================




== Installation du plugin Widget
.Avant de commencer
[NOTE]
===============================
Il vous faut au préalable créer un compte sur le market Jeedom (https://market.jeedom.fr) puis entrer vos informations de connexion (login et mdp) dans les paramètres de votre Jeedom
===============================

Comme pour tout plugin, le plugin Widget s'installe depuis l'interface Jeedom, menu "Général"=>"plugin"

image::../images/capture001.png[]

Cliquer sur l'icône vert pour accéder directement au market, dans cette fenêtre cliquer sur officiel et dans le champ de recherche mettre "Widget"


image::../images/capture002.png[]


Cliquer sur l'icône du plugin, cela ouvre la fiche du plugin dans laquelle on trouve plusieurs informations.

image::../images/capture003.png[]


Cliquer sur le bouton "Installer stable", une fois installer Jeedom vous demande si vous souhaiter aller à la page de configuration du plugin, répondre oui.
Sur la page de configuration du plugin widget, nous n'avons pour se plugin qu'une seule option activer ou désactiver.
Par défaut ce dernier est désactiver, je vous invite donc à cliquer sur le bouton vert "activer".
Dès à présent le plugin est actif et opérationnel.




== Présentation et fonction de base du Plugin Widget
Afin de se rendre dans le plugin Widget, il faut aller dans le menu "Plugins"=>"Programmation"=>"Widget".

image::../images/capture005.png[]

On se trouve donc sur la page principale du plugin, se dernier dispose par défaut d'un éventail de widget dès son installation, il est possible d'en télécharger d'autre via le market ou de créer ses propres Widget (voir plus bas).

image::../images/capture006.png[]

En cliquant sur l'un des widgets de la liste du menu de droite ou de gauche vous allez ouvrir la page de configuration du widget sur laquelle vous pouvez modifier,  voir un aperçu du widget, et tout un tas d'infos de configuration comme le code source du widget

image::../images/capture007.png[]

WARNING: Si vous modifier un Widget qui n'ai pas une de vos créations il est préférable de le dupliquer pour éviter de perdre vos modifs si le widget original est mis à jours.

Pour plus d'infos sur la configuration et création de widget voir plus bas.

=== Appliquer le widget sur une commande

Pour appliquer un widget sur une seul commande ou modifier celui appliquer, il vous faut vous rendre sur la page de configuration du module.
Le chemin pour accéder au module diverge en fonction du type de se dernier, voici quelques exemples :

Pour les modules Z-Wave, "Plugins"=>"Protocole domotique"=>"OpenZwave", puis choisir le module qui à la commande que vous souhaitez modifier

image::../images/capture024.png[]

Sur la page de configuration du module se rendre sur la commande et cliquer sur les roues crantées, dans la nouvelle fenêtre se rendre dans l'onglet "Affichage avancé"

image::../images/capture025.png[]

Vous pouvez ici modifier le widget appliqué pour les ordinateurs et mobiles avec les listes déroulantes dédiées.

image::../images/capture014.png[]


.Filtrage des listes
NOTE: Les listes déroulantes sont auto filtrante, elle ne fournisse que les widget compatible avec le type de commande.

[[ancre-1]]
=== Appliquer le widget sur plusieurs commandes

En cliquant sur le bouton “Appliquer sur des commandes” vous ouvrez une fenêtre qui liste toutes les commandes compatible avec le type du widget, vous pouvez donc simplement appliquer ou retirer le widget à de nombreuses commandes en une seule fois.

image::../images/capture008.png[]

Il suffit de cocher les commandes sur lesquelles vous souhaiter appliquer le widget

==== Divers exemple pour 1 même commande
.Widget : badge-transparent
image::../images/capture009.png[]

.Widget : badge
image::../images/capture010.png[]

.Widget : ConsoIMG
image::../images/capture011.png[]



=== Options de personnalisation des widgets
Depuis la version 1.112 de Jeedom, il est possible de personnaliser les widgets avec des options spécifique (créer par le développeur du widget) et commune à tous les widgets, ont peux donc avoir un widget qui s'affichera différemment d'une commande à l'autre.

Ont peux accéder à ses options de 2 façons, site par l'arbre Domotique qui se trouve dans le menu "Général" => "Arbre Domotique"

image::../images/capture012.png[]

Sur cette page vous trouver tous vos éléments domotique, les Objets, les modules, les commandes.

image::../images/capture013.png[]


Ont peux aussi y accéder depuis la page de configuration des modules.

image::../images/capture015.png[]

==== Ajouter une option personnaliser
Dans l'onglet "Affichage avancé" on trouve 2 listes déroulantes qui permettent de changer pour la commande le widget utilisé sur un ordinateur et l'autre pour les Mobiles.
Il y a aussi d'autres option, pour afficher ou non les noms et stat, forcé le retour à la ligne avant/après le widget si il y a plusieurs commande dans un module (retours a la ligne dans la tuile).
Enfin la liste des paramètres optionnels Widget appliquer (la liste disponible se trouve sur le forum ou Wiki, un système de doc est à l’étude)

image::../images/capture014.png[]

.exemple de valeur pour afficher un compteur spécifique
image::../images/capture016.png[]

.exemple 2 de valeur pour afficher un autre compteur
image::../images/capture017.png[]


.Ajout d'option
NOTE: Pour ajouter une option il vous suffit de cliquer sur le bouton "ajouter", de renseigner le nom de l'option avec les bonnes minuscules et majuscules, ainsi que la valeur à attribuer à l'option.
Pour trouver les options consulter le forum ou/et le Wiki


=== Configuration avancé
Dans l'onglet "Configuration avancé" vous trouvez 4 thèmes d'option de configuration

image::../images/capture018.png[]

==== Calcul et arrondit
Cette partie contiens 2 options, la première "Formule de calcul" permet d'effectuer des corrections de valeur ou convention par le biais de calcule.
Pour récupérer la valeur de la commande, il faut utiliser un "TAG Jeedom", on utilise donc le Tag "\#value#".

La seconde, "Arrondi" permet de choisir le nombre de chiffre après la virgule souhaiter, 0 étais aucun, 1 un chiffre, ect....

.Sans les options Calcul et arrondit
image::../images/capture021.png[]

.Exemple de corection
image::../images/capture019.png[]

.Résultat après correction
image::../images/capture020.png[]

==== Action sur la valeur
Cette partie permet de réaliser des actions simples en fonction de la valeur de la commande.
Ont peux donc dans la liste déroulante choisir entre valeur "Egale à", "Supérieur à", "Inférieur à" et "Différent de".
L'option "plus de (min)" permet de temporiser l'action.
La ligne suivante, "Action à faire" donne 2 possibilités, soit le déclanchement d'une commande soit d'un scénario.

image::../images/capture022.png[]

==== Historique
La partie Historique permet de modifier le comportement de l'historisation de la valeur de la commande, ont peux donc ici l'activer ou la désactiver.
TIP: Plus il y a de commande historiser plus cela peur ralentir le système, il ne faut donc activer cette option que sur les commandes pour lesquelles vous avez une utilité d'avoir un historique.

Le mode de lissage, permet de définir comment Jeedom vas enregistrer les valeurs et les retranscrire, cela permet d’avoir des courbe plus fluide sur tout si le module envoie rarement les infos ou si il envoie souvent des valeurs très différente.

Ont peux aussi dans l'option qui suit activer une purge automatique de l'historique pour ne pas conserver plus de donnée que besoin.

image::../images/capture023.png[]


==== Autres
#Doc à venir#


=== Création / Modification de widget
Le plugin offre 2 possibilité pour la création de Widget, le mode facile qui permet de faire des widget basic facilement avec un assistent de création, et le mode avancer qui lui permet aussi la modification par la suite de tous les widgets.

.Editeur de widget en mode avancé
NOTE: Le mode avancé apporte une souplesse sans limite, toute fois il vous faut avoir quelques connaissance en langage de programmation basique telle que HTML et CSS pour la base et JavaScript pour pouvoir réaliser des choses un peux plus complexe.

==== Mode création facile
Pour réaliser un widget avec l'assistant, il vous suffit de vous rendre dans le plugin : menu "Plugins"=>"Programmation"=>"Widget".
A partir de cette page, cliquer sur le bouton "Mode création facile" en haut à gauche

image::../images/capture026.png[]

Sur la nouvelle page, vous pouvez dans la partie de droite, visualiser les icônes de base Jeedom, les images que vous avez importé et les packs importer.
Sur la partie de gauche, en premier un bouton pour importer des packs ou image, puis 3 boutons pour la création de widget.

image::../images/capture027.png[]

.Les 3 types de widget en mode facile
* Widget On/Off => Destiner au commandes bouton pour les on/off 
* Widget Simple Etat => Destiner pour les commandes qui ont un retour d'état
* Widget Numérique => Destiner pour les commandes qui envoie une valeur numérique (exemple : Température, luminosité ... ect)

===== Exemple avec la création d'un widget d'état
NOTE: Cet exemple reste applicable pour les 2 autres types de création

Cliquer sur le bouton "Widget Simple Etat", ont arrive sur la page de configuration assistée, il faut donner un nom au widget (nom unique), le type d'interfaces, si le widget est destiner au PC (Dashboard) ou mobile, puis la bibliothèque à utiliser (Jeedom, Image perso ou packs).

image::../images/capture028.png[]

Puis il vous faut choisir l'icône pour l'Etat 0 et 1, ainsi que la taille de l'icône (valeur en "EM" = % de la taille d'origine de la police du navigateur, 1 = 100%), une fois choisie, en dessous de la zone de configuration, le code source apparait

WARNING: Ne pas modifier ses informations si vous ne savez pas ce que vous faites.

Il ne reste plus qu'à valider pour finaliser la création du widget, vous serez automatiquement rediriger sur la page de configuration avancé qui vous permet d'appliquer le widget à plusieurs commande (voir le chapitre <<ancre-1, Appliquer le widget sur plusieurs commandes>>)

==== Création / modification en mode avancé
En mode avancé, il faut avoir des connaissances en langage de programmation "HTML", "CSS" et "JavaScript" pour pouvoir modifier correctement un widget.

NOTE: Il existe plusieurs sites en FR sur le web pour apprendre ses langages, je vous conseille OpenClassRoom qui explique tout depuis le début.

Pour accéder au mode avancé, il vous suffit de vous rendre dans le plugin widget, de choisir le widget a modifier ou de cliquer sur le bouton "Ajouter un widget"

===== Création d'un widget
Depuis la page principale du plugin, cliqué sur "Ajouter un Widget", Jeedom vous demande quelques infos sur le future widget.

image::../images/capture029.png[]

- Le nom doit être un nom unique, vérifié donc que ce nom n'existe pas déjà
- Version, correspond au type d'appareil pour le quelle il est destiner (PC ou Mobile)
- Type, correspond au type de commande qui utilisera le widget, Aucun, info ou action
- Sous-type, donne une précision au type choisi précédemment.

Ont peux modifier le nom, type et sous-type par la suite, toute fois cela peut avoir des incidences si le widget est déjà appliquer à une ou plusieurs commande, il vaut donc mieux l'éviter.

====== Le type Info
Le type "info" est utilisé pour des commandes qui renvoient  une valeur, par exemple, un état de module, une valeur numérique (température, luminosité, humidité ....ect), un texte ou toute autre information.

.Il existe 3 sous-types pour le type info.
* Numérique : pour les nombres
* Binaire : pour les états on/off (0/1)
* Autre : pour tous les autres types d'infos comme les textes

====== Le type action
Le type "action" est utilisé pour des commandes qui vont avoir une action dans Jeedom ou sur un équipement externe.

.Il existe 4 sous-types pour le type action.
* Défaut : utiliser pour créer des boutons d'action
* Curseur : utiliser pour créer des curseurs permettent de modifier des valeurs numériques
* Message : Utiliser pour créer une zone de saisie de texte avec bouton d'envoie
* Couleur : utiliser pour créer un bouton de choix de couleur

Une fois paramétrer cliquer sur "Ajouter", Jeedom vous redirige sur la page principale de la configuration/modification du Widget, à partir de là le widget est créer dans Jeedom mais ne contiens pour le moment pas de code pour l'affichage de la commande.

image::../images/capture030.png[]


===== Modification d'un widget
Une fois sur la page principal de config d'un widget, c'est la partie Code source que les modifications de l'apparence s'applique.

WARNING: Pour modifier ses infos il faut avoir quelques base en programmation HTML, CSS et JavaScript, les modifications peuvent avoir un impact importent sur l'affichage du widget et sur l'affichage d'autre widget voir bloquer l'affichage de 1 voir tous les widgets.

La base (squelette) d'un widget se fait en HTML, cela permet de structurer l'affichage et retrouver plus simplement les informations.
Dans Jeedom pour les widgets, le premier bout de code à créer c'est une "div" qui fera office de conteneur principal pour tout le code de notre Widget.
Dans cette "div", ont peux y trouver jusqu'à 3 sous parties distinctes :
* La partie HTML qui va afficher les informations
* La partie CSS qui vas rendre plus jolis en mettent en forme la parte HTML (Partie Facultative)
* La partie JavaScript qui permet de travailler sur divers action, calcule et animation

====== Code HTML
Plus tôt que de long discourt, voici un exemple de code de base pour un widget

.Structure HTML de base
[source,html]
----
<div>
	<center>
		<span></span>
	</center>
	
	<style>
	
	</style>
	
	<script>
   
	</script>
</div>
----
La structure de base qui schématise les différents emplacements dans notre widget est maintenant créer mais pour autant ont as rien qui ne s'affiche, c'est normal.
.explication du code
div:: conteneur multi fonction relativement polyvalent avec retour à la ligne après lui
center:: balise que centre sont contenu
span:: conteneur multi fonction relativement polyvalent sans retour à la ligne après lui
style:: Conteneur pour le code CSS qui sera appliquer de façon général (attention sont contenu peux affecter tous les éléments de la page)
script:: balise qui vas contenir du JavaScript

En l'état, il est difficile de faire quoi que ce soit avec ce bout de code, c'est pourquoi ont vas ajouter quelques options (appeler Attribut en langage HTML) dans nos balises.

.Ajout des Attribut de base
[source,html]
----
<div id="Doc-#id#" class="cmd tooltips cmd-widget #history#" title="" data-type="info" data-subtype="numeric" data-cmd_id="#id#" >
	
	<center>
		<span></span>
	</center>
	
	<style>	
	
	</style>
	
	<script> 
	
	</script>
</div>
----
Dans notre "div" principal ont à ajouter plusieurs Attribut :
.explication du code
id:: L'attribut "id" permet de rendre un élément unique sur la page afin de le retrouver et cibler plus facilement, il est impératif que ça valeur soie unique sur la page, pour cela je vous conseille d'utiliser un mot qui représente notre élément, dans notre exemple la div représente l'ensemble de notre widget donc ont peux utiliser le nom de notre widget ou une abréviation (ici j'ai choisi Doc-), puis afin de garantir que l'id soie unique, ont vas y mettre un tag "\#id#" (pour plus d'info sur les tag Jeedom voir plus bas).

class:: Les class contrairement au id ne sont pas unique, elle servent à appliquer un style défini dans la partie style (la balise) ont peux ainsi reproduire simplement et facilement une même mise en forme que l'on crée une fois et réutilise par mot clé (class), ici on ajoute plusieurs class définie et disponible de base dans Jeedom (voir plus bas les class Jeedom).

data-type:: cette attribut permet de stock le type de commande sur laquelle le widget vas être appliquer, il faut donc que ça valeur correspond au paramètre type en dessus de la zone de code.

data-subtype:: cette attribut permet de stock le sous-type de commande sur laquelle le widget vas être appliquer, il faut donc que ça valeur correspond au paramètre sous-type en dessus de la zone de code.

data-cmd_id:: Cette Attribut prend comme valeur le Tag \#id#, il est utilisé par Jeedom pour la mise à jours du la Dashboard.

A partir de là ont as une base qui correspond au standard Jeedom, c'est le code minimaliste qu'il faut pour avoir un widget qui respecte la charte/règle Jeedom

IMPORTANT: Ne pas oublier de modifier l'attribut data-type et data-subtype si vous modifier ses valeur dans la config du widget.

====== Code CSS
Cette partie qui vient s'ajouter entre les 2 balises "style", permet de déclarer des règles de mise en forme.
Cette partie est facultative car ont peux ajouter les mises en forme directement dans l'attribut style d'une balise ou à l'aide de JavaScript.
L'utilisation de cette partie est donc une question de préférence pou bien séparer le HTML et le CSS

WARNING: Tout code déclarer dans des balise style, s'applique à toute la page, il faut donc bien faire attention au sélecteur CSS que vous choisissez d'utiliser pour ne pas altérer les autres widget.

Afin de ne pas impacter d'autre widget involontairement par le code CSS que vous allez y mettre je vous conseille d'utiliser le sélecteur id qui cible votre widget afin de ne pas impacter les autres widget.

Exemple, si le texte que je mettrais dans la balise "Span" je veux le mettre en rouge, ont aurais tendance a écrire :

.Code mis dans la balise Style
[source,CSS]
----
span{
	color: red;
}
----

Mais cela aurais pour effet de changer la couleur du texte de tous les span de la page.
Donc pour éviter cela ajouter un sélecteur id qui vise votre widget pour délimiter son action

.Code mis dans la balise Style et délimité
[source,CSS]
----
#Doc-#id# span{
	color: red;
}
----
En ajoutent \#Doc-#id# devant le sélecteur span, ont délimite la modification à l'intérieur de notre widget.

====== Code JavaScript
Le JavaScript se met entre les balises "Script", on utilise le JavaScript pour faire des calculs, convertir des données, animer le widget, mettre en forme le widget, réaliser des actions sur le widget en fonction d'événement.
En plus du JavaScript de base, Jeedom intègre par défaut plusieurs Framework qui permette de simplifier le code JavaScript ont peux donc utiliser sans les initialiser :

* Jquery
* Jquery UI
* Bootstrap

WARNING: En cas d'erreur dans le code JS, cela peut bloquer tous les codes JS qui pourrait suivre que ce soit dans le widget ou d'autre widget, il faut donc être prudent lors des modifications.



==== Les Tag Jeedom
Dans Jeedom vous rencontrerez souvent les TAG qui sont des noms entourer de "#", le principe de fonctionnement de ses tag est simple, Jeedom vas les remplaceras par la valeur qui correspond au tag.
Les Tags sont des sortes de Variable (boite) dans les quelles sont stocker des valeurs dont on ne connais pas leurs valeurs au moment où l'on écrit le code, c'est un peu comme si ont fessais un texte avec des blanc pour y mettre plus tard des mots qui donnerais un sens varier au texte en fonction de ses dernies.

Tous les tags ne sont pas disponibles avec tous les types de commande, voici donc la liste et leur détail :

.Tag Commun au type action et info
* \#id# => ID de la commande créé par Jeedom à la création de la commande (valeur numérique unique).
* \#logicalId# => ID logique de la commande (peut être vide).
* \#name# => Nom de la commande.
* \#minValue# => Valeur minimum que peut prendre la commande.
* \#maxValue# => Valeur maximum que peut prendre la commande.

.Tag pour le type action
* \#valueName# => Nom de la commande info liée, si la commande action est liée à une commande info.
* \#lastValue# => Dernière valeur de la commande (peut être vide).

.Tag pour le type info
* \#name_display# => Nom de la commande avec retour à la ligne et vide si le nom de la commande ne doit pas être affiché
** A utiliser comme du texte ou en JS
* \#unite# => Unité de la commande
** A utiliser comme du texte ou en JS
* \#collectDate# => Retourne la date et heure de la dernière mise à jours du widget au format "yyyy-mm-dd hh:mn:ss"
** A utiliser comme du texte, en JS, ou dans l'attribut titre
* \#state# => Valeur de la commande 
** A utiliser comme du texte ou en JS
* \#displayHistory# => Permet de prendre en compte l'option "Afficher les statistiques sur les widgets" dans le menu "Général"=>"Administration"=>"Configuration" onglet "Configuration des commandes", si l'option est sur oui, le tag retournera un vide sinon 'display : none;'
** A utiliser dans l'attribut "style" d'une balise html à afficher si l'historisation est activer dans la config Jeedom  
* \#averageHistoryValue# => Valeur moyenne sur les x dernières heures de la commande
** A utiliser comme du texte ou en JS
* \#minHistoryValue# => Minimum sur les x dernières heures de la commande
** A utiliser comme du texte ou en JS
* \#maxHistoryValue# => Maximum sur les x dernières heures de la commande
** A utiliser comme du texte ou en JS

* \#tendance# => Permet si l'historique de la valeur est activé de retourner les class : 'fa fa-minus', 'fa fa-arrow-up' ou 'fa fa-arrow-down' (icone trait, flèche bas, flèche haut), lier à la tendance de la valeur
----
A utiliser dans l'attribut "class" d'une balise "i"
----

* \#history# => Permet si l'historique de la valeur est activé de retourner les class : 'history cursor' (Voir les class CSS Jeedom), si non il sera remplacer par un vide. Le tag permet donc d'afficher ou non le graphique d'hisorique sur la dashboard.
+
----
A utiliser dans l'attribut "class" de la div principale 
----
+
==== Les class CSS Jeedom 

cmd:: doit impérativement être ajouter à l'attribut "class" de la div principale, cette class permet la mise à jours du widget, sans cette class le widget ne se met a jours que par actualisation de la page.

cmd-widget:: cette class est recommandé car elle permet ajouter quelques paramètre CSS par defaut au widget pour un bon comportement.

cursor:: Permet de modifier le pointeur en main.

history:: Cette class permet de modifier le pointeur en main et au clique d'afficher l'historique de la valeur du widget.

tooltips:: ??



////

Le principe pour le code du widget est relativement simple ça marche par remplacement de “tag” lors de la génération du widget, voici la liste des “tags” :


- Info
* \#id# => ID de la commande
* \#logicalId# => ID logique de la commande (peut être vide)
* \#name# => Nom de la commande
* \#name_display# => Nom de la commande avec retour à la ligne et vide si le nom de la commande ne doit pas être affiché
* \#unite# => Unité de la commande
* \#collectDate# => Date exacte ou de la valeur de la commande
* \#state# => Valeur de la commande 
** Si la commande est binaire l'état peut être "green" ou "red"
* \#displayHistory# => Si la commande est historisée alors la valeur est de '' sinon 'display : none;'
* \#averageHistoryValue# => Valeur moyenne sur les x dernières heures de la commande
* \#minHistoryValue# => Minimum sur les x dernières heures de la commande
* \#maxHistoryValue# => Maximum sur les x dernières heures de la commande
* \#tendance# => Tendance soit 'fa fa-minus', 'fa fa-arrow-up' ou 'fa fa-arrow-down'
* \#minValue# => Valeur minimum que peut prendre la commande
* \#maxValue# => Valeur maximum que peut prendre la commande
* \#history# => si la commande est historisée historize vaudra : 'history cursor' et le widget 'jeedom.cmd.info.history.default' sera ajouté (pour permettre d'afficher l'historique)

- Action
* \#id# => ID de la commande
* \#logicalId# => ID logique de la commande (peut être vide)
* \#name# => Nom de la commande
* \#valueName# => Nom de la commande info, si la commande action est liée à une commande info
* \#lastValue# => Dernière valeur de la commande (peut être vide)
* \#minValue# => Valeur minimum que peut prendre la commande
* \#maxValue# => Valeur maximum que peut prendre la commande
* Pour que l'action soit exécutée il faut appeler la fonction : jeedom.cmd.execute(ID,options) avec
** ID => ID de la commande
** options => objet contenant les options de la commande

** Exemple pour une commande de type slider :
    jeedom.cmd.execute({id :'#id#', value : {slider : 30}})

** Exemple pour une commande de type color :
     jeedom.cmd.execute({id :'#id#', { color: '#000000'}})

Voilà ce plugin permet de modifier facilement le rendu des commandes pour pouvoir configurer son tableau de bord exactement comme on le souhaite.
////
