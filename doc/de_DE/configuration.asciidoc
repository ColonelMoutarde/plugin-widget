
:Author: Skyline-ch
:Email: <skyline-ch@play-4-fun.net>
:Date: 13.07.2015
:Revision: 1.198.0

== Einleitung
Le plugin widget est un plugin un peu particulier, car il ne permet pas de créer des équipements mais de modifier le rendu (affichage) d’une commande. L'objectif de ce plugin est donc de permettre de personnaliser simplement la façon d'afficher une valeur, info, ou action en fonction de ses goûts et désirs.

Depuis la version 1.112 de Jeedom, il est possible de personnaliser les widgets avec des options spécifiques (créées par le développeur du widget). On peut donc avoir un widget qui s'affichera différemment d'une commande à l'autre.

Ainsi, on peut avoir un même widget écrit en bleu sur une commande et en vert sur une autre.


.Begriffe
[NOTE]
===============================
Widget und Fliesen, sollte nicht verwechselt werden. 

Le widget, c'est la partie qui va se charger de mettre en forme et afficher une info ou commande. Un widget ne doit s'occuper que d'une seule commande ou info.

La Tuile, c'est un regroupement de widgets pour un module. C'est la zone dans laquelle vont s'afficher les différents widgets appliqués aux commandes et infos du module.
===============================




== Installation des Widget Plugins

Wie jedes Plugin wird das Widget-Plugin von der Jeedom-Schnittstelle aus installiert, Menü "Allgemein"=>"Plugins"

image::../images/capture001.png[]

Cliquer sur l'icône verte pour accéder directement au Market. Dans cette fenêtre cliquer sur "Officiel" et dans le champ de recherche mettre "Widget".


image::../images/capture002.png[]


Klicken Sie auf das Plugin-Symbol, es öffnet sich die Karteikarte des Plugins, in dem man mehrere Informationen findet.

image::../images/capture003.png[]


Cliquer sur le bouton "Installer stable". Une fois installé, Jeedom vous demande si vous souhaitez aller à la page de configuration du plugin. Répondre oui.
Sur la page de configuration du plugin widget, nous n'avons pour ce plugin qu'une seule option : activer ou désactiver.

Par défaut le plugin est désactivé. je vous invite donc à cliquer sur le bouton vert "activer".

Von nun an ist das Plugin aktiv und einsatzfähig.



== Präsentation und Grundfunktion des Widget Plugin
Um sich in das Widget Plugin zu begeben, muss man ins Menü "Plugins"=>"Programmierung"=>"Widget" gehen.

image::../images/capture005.png[]

On se trouve donc sur la page principale du plugin. Ce dernier dispose par défaut d'un éventail de widgets dès son installation Il est possible d'en télécharger d'autres via le market ou de créer ses propres widgets (voir plus bas).

image::../images/capture006.png[]

En cliquant sur l'un des widgets de la liste du menu de droite ou de gauche vous allez ouvrir la page de configuration du widget, dans laquelle vous pouvez modifier, voir un aperçu du widget (si Jeedom trouve une commande compatible) et tout un tas d'infos de configuration comme le code source du widget

image::../images/capture007.png[]

WARNING: Si vous modifiez un widget qui n'est pas une de vos créations, il est préférable de le dupliquer pour éviter de perdre vos modifs si le widget original est mis à jour.

Für weitere Informationen über das Konfigurieren und Erstellen von Widgets finden Sie unten.

=== Das Widget auf ein Befehl anwenden

Pour appliquer un widget sur une seule commande ou modifier celui appliqué, il faut vous rendre sur la page de configuration du module.
Le chemin pour accéder au module diverge en fonction du type de ce dernier. Voici quelques exemples :

Pour les modules Z-Wave, "Plugins"=>"Protocole domotique"=>"Z-wave", puis choisir le module de la commande que vous souhaitez modifier.

image::../images/capture024.png[]

Sur la page de configuration du module, se rendre sur la commande et cliquer sur les roues crantées. Dans la nouvelle fenêtre, se rendre dans l'onglet "Affichage avancé"

image::../images/capture025.png[]

Hier können Sie das verwendete Widget für Computer und Mobil mit zugehöriger Dropdown-Listen ändern.  

image::../images/capture014.png[]


.Filtern der Listen 
NOTE: Dropdown-Listen werden automatisch gefiltert, sie zeigen nur die kompatibelen Widgets mit der gleichen Art des Befehls.

[[ancre-1]]
=== Widgets auf mehrere Befehle anwenden

En cliquant sur le bouton “Appliquer sur des commandes” vous ouvrez une fenêtre qui liste toutes les commandes compatibles avec le type du widget. Vous pouvez donc simplement appliquer ou retirer le widget à de nombreuses commandes en une seule fois.

image::../images/capture008.png[]

Es reicht aus die Befehle anzukreuzen, auf denen sie das Widget anwenden möchten

==== Verschiedene Beispiele für den gleichen Befehl
.Widget : badge-transparent
image::../images/capture009.png[]

.Widget : badge
image::../images/capture010.png[]

.Widget : ConsoIMG
image::../images/capture011.png[]



=== Anpassungsmöglichkeiten der Widget
Depuis la version 1.112 de Jeedom, il est possible de personnaliser les widgets avec des options spécifiques (créées par le développeur du widget) et communes à tous les widgets. On peut donc avoir un widget qui s'affichera différemment d'une commande à l'autre.

Man hat zu diesen Optionen 2 Wege des zugriffs. 
Soit par l'arbre Domotique qui se trouve dans le menu "Général" => "Résumé Domotique"

image::../images/capture012.png[]

Auf dieser Seite finden Sie all Ihre Haus-Automatisierungs-Geräte, Objekte, Module und Befehle.
Klicken Sie auf das kleine Zahnrad um auf die Konfigurationsseite zuzugreifen.

image::../images/capture013.png[]


Soit depuis la page de configuration des modules.

image::../images/capture015.png[]

==== Benutzerdefinierte Option hinzufügen
Dans l'onglet "Affichage avancé" on trouve 2 listes déroulantes qui permettent de changer pour la commande le widget utilisé sur un ordinateur et l'autre pour les mobiles.
Il y a aussi d'autres options, pour afficher ou non les noms et stats, forcer le retour à la ligne avant/après le widget s'il y a plusieurs commandes dans un module (retours à la ligne dans la tuile).
Enfin la liste des paramètres optionnels Widget appliqués (la liste disponible se trouve sur le forum ou Wiki, un système de doc est à l’étude)

image::../images/capture014.png[]

.Beispiel 1, der Wert, um einen bestimmten Zähler anzuzeigen
image::../images/capture016.png[]

.Beispiel 2,  um einen anderen Zähler Wert anzuzeigen
image::../images/capture017.png[]


.Option hinzufügen
NOTE: Pour ajouter une option il vous suffit de cliquer sur le bouton "Ajouter", de renseigner le nom de l'option avec les bonnes minuscules et majuscules, ainsi que la valeur à attribuer à l'option.
Um die Optionen zu finden, konsultieren sie das Forum und/oder das Wiki.


=== Erweiterte Konfiguration

Siehe im Dokument "Übersicht Haus-Automatisierung" => https://jeedom.github.io/documentation/core/de_DE/display.html[hier]


=== Erstellung / Änderung von Widget 
Le plugin offre 2 possibilités pour la création de Widgets, le mode facile qui permet de faire des widgets basiques facilement avec un assistant de création, et le mode avancé qui permet aussi la modification par la suite de tous les widgets.

.Editeur de widgets en mode avancé
NOTE: Le mode avancé apporte une souplesse sans limite. Toutefois, il vous faut avoir quelques connaissances en langage de programmation basique telle que HTML et CSS pour la base et JavaScript pour pouvoir réaliser des choses un peu plus complexes.

==== Einfacher Erstellungs Modus
Um ein Widget mit dem Assistenten zu erstellen, gehen Sie einfach in das Plugin : Menü "Plugins"=>
A partir de cette page, cliquer sur le bouton "Mode création facile" en haut à gauche.

image::../images/capture026.png[]

Sur la nouvelle page, vous pouvez dans la partie de droite, visualiser les icônes de base Jeedom, les images que vous avez importées et les packs importés.
Sur la partie de gauche, en premier un bouton pour importer des packs ou images, puis 3 boutons pour la création de widget.

image::../images/capture027.png[]

.Les 3 types d'un widget en mode facile
* Widget On/Off => Destiné aux commandes bouton pour les on/off 
* Widget Simple Etat => Destiné aux commandes qui ont un retour d'état
* Widget Numérique => Destiné aux commandes qui envoient une valeur numérique (exemple : Température, luminosité ... etc)

===== Beispiel für die Erstellung eines Zustands Widget
NOTE: Dieses Beispiel bleibt für die 2 anderen Erstellungtypen anwendbar 

Cliquer sur le bouton "Widget Simple Etat". On arrive sur la page de configuration assistée. Il faut donner un nom au widget (nom unique), le type d'interface, si le widget est destiné au PC (Dashboard) ou mobile, puis la bibliothèque à utiliser (Jeedom, Image perso ou packs).

image::../images/capture028.png[]

Puis il vous faut choisir l'icône pour l'Etat 0 et 1, ainsi que la taille de l'icône (valeur en "EM" = % de la taille d'origine de la police du navigateur, 1 = 100%). Ceci fait, le code source apparaît en dessous de la zone de configuration.

WARNING: Ne pas modifier ces informations si vous ne savez pas ce que vous faites.

Il ne reste plus qu'à valider pour finaliser la création du widget. Vous serez automatiquement redirigé sur la page de configuration avancée qui vous permet d'appliquer le widget à plusieurs commandes (voir le chapitre <<ancre-1, Appliquer le widget sur plusieurs commandes>>)

==== Erstellung / Änderung von Widget im erweiterten Modus
Im erweiterten Modus, müssen sie die Programmiersprachen "HTML", "CSS" und "JavaScript" beherrschen, um Widgets richtig zu bearbeiten.

NOTE: Il existe plusieurs sites en FR sur le web pour apprendre ces langages, je vous conseille OpenClassRoom qui explique tout depuis le début.

Pour accéder au mode avancé, il vous suffit de vous rendre dans le plugin widget, de choisir le widget à modifier ou de cliquer sur le bouton "Ajouter un widget"

===== Widget erstellen
Depuis la page principale du plugin, cliquer sur "Ajouter un Widget". Jeedom vous demande quelques infos sur le futur widget.

image::../images/capture029.png[]

- Le nom doit être un nom unique. Vérifiez donc que ce nom n'existe pas déjà.
- Version, correspond au type d'appareil pour lequel il est destiné (PC ou Mobile).
- Type, correspond au type de commande qui utilisera le widget: aucun, info ou action.
- Unter-Type, eine genauere Angabe vom zuvor gewählten Typ  auswählen

On peut modifier le nom, type et sous-type par la suite. Toutefois, cela peut avoir des incidences si le widget est déjà appliqué à une ou plusieurs commandes. Il vaut donc mieux l'éviter.

====== Der Info Typ
Le type "info" est utilisé pour des commandes qui renvoient  une valeur, par exemple, un état de module, une valeur numérique (température, luminosité, humidité etc), un texte ou toute autre information.

Es gibt 3 Unter-Typen für den Info-Typ. 
* Numerisch : für die Zahlen
*  Binär : für die Zustände an/aus (0/1)
* Andere : für alle anderen Arten von Informationen wie Text

====== Der Aktion Typ
Der Typ "Aktion" wird für Befehle benutzt, die in Jeedom eine Aktion haben, oder auf externen Geräten.  

Es gibt 4 Unter-Typen für den Aktion-Typ. 
* Défaut : utilisé pour créer des boutons d'action
* Curseur : utilisé pour créer des curseurs permettant de modifier des valeurs numériques
* Message : Utilisé pour créer une zone de saisie de texte avec bouton d'envoi
* Couleur : utilisé pour créer un bouton de choix de couleur

Une fois paramétré, cliquer sur "Ajouter". Jeedom vous redirige sur la page principale de la configuration/modification du Widget. A partir de là, le widget est créé dans Jeedom mais ne contient pour le moment pas de code pour l'affichage de la commande.

image::../images/capture030.png[]


===== Ändern eines Widget
Une fois sur la page principale de config d'un widget, c'est dans la partie "code source" que les modifications de l'apparence s'appliquent.

WARNING: Pour modifier ces infos il faut avoir quelques bases en programmation HTML, CSS et JavaScript. Les modifications peuvent avoir un impact important sur l'affichage du widget et sur l'affichage d'autres widgets, voire bloquer l'affichage de tous les widgets.

La base (squelette) d'un widget se fait en HTML. Cela permet de structurer l'affichage et de retrouver plus simplement les informations.

Dans Jeedom pour les widgets, le premier bout de code à créer c'est une "div" qui fera office de conteneur principal pour tout le code de notre Widget.

Dans cette "div", on peut y trouver jusqu'à 3 sous-parties distinctes :

* La partie HTML qui va afficher les informations
* La partie CSS qui va rendre plus joli en mettant en forme la parte HTML (Partie Facultative)
* La partie JavaScript qui permet de travailler sur diverses actions, calculs et animations

====== HTML Code
Statt langer Rede, hier ist ein Basis-Code Beispiel für ein Widget

.HTML Grundstruktur
[source,html]
----
<div>
	<center>
		<span></span>
	</center>
	
	<style>
	
	</style>
	
	<script>
   
	</script>
</div>
----
La structure de base qui schématise les différents emplacements dans notre widget est maintenant créée. Pour autant, on n'a rien qui s'affiche, c'est normal.

.Erklärung des Codes
div:: 
	relativ vielseitiger Multifunktions-Container nach ihm kommt ein Zeilenumbruch 
center:: 
	Markierungszeichen, der Inhalt wird zentriert 
span:: 
	relativ vielseitigen Multi-Funktions-Container ohne einen Zeilenumbruch nach ihm
style:: 
	Container für den CSS-Code, der im Großen und Ganzen angewendet werden soll (Achtung der Inhalt kann aller Elemente auf der Seite beeinflussen)
script:: 
	Markierungszeichen, das JavaScript enthalten wird

In diesem Zustand ist es schwierig, etwas mit diesem Codestück zu machen. Deshalb wird man einige Optionen (bezeichnet als Attribute in der HTML-Sprache) zwischen unseren Markierungszeichen hinzufügen.

.Hinzufügen von grundlegenden Attribute
[source,html]
----
<div class="Doc-#id# cmd tooltips cmd-widget #history#" title="" data-type="info" data-subtype="numeric" data-cmd_id="#id#" >
	
	<center>
		<span></span>
	</center>
	
	<style>	
	
	</style>
	
	<script> 
	
	</script>
</div>
----
In unserem "div" wurden mehrere wichtige Attribute hinzugefügt :

.Erklärung des Codes
id:: 
	Das "id" Attribut wird auf Jeedom nicht empfohlen 
	
IMPORTANT: Um sicher zu sein, einen Konflikt mit IDs unter Jeedom zu vermeiden, verwenden wir die class-id und das Attribut "data-". Das ermöglicht im Falle einer Kollision, das die Web-Seite nicht erstart. 

class:: 
	Les class contrairement aux ids ne sont pas uniques. Elle servent à appliquer un style défini dans la partie style (la balise). On peut ainsi reproduire simplement une même mise en forme que l'on crée une fois et que l'on réutilise par mot clé (class). Ici on ajoute plusieurs class définies et disponibles de base dans Jeedom (voir plus bas les class Jeedom).
	
	Jeedom utilise à la place de l'attribut id, une class comme id, cela permet de rendre un élément unique sur la page afin de le retrouver et le cibler plus facilement. Il est impératif que sa valeur soit unique sur la page. Pour cela je vous conseille d'utiliser un mot qui représente notre élément. Dans notre exemple la div représente l'ensemble de notre widget, donc on peut utiliser le nom de notre widget ou une abréviation (ici j'ai choisi Doc-). Ensuite, afin de garantir que la class-id soit unique, on va y mettre un tag "#id#" (pour plus d'info sur les tags Jeedom voir plus bas), ce qui donne "Doc-#id#".

data-type:: 
	cette attribut permet de stocker le type de la commande sur laquelle le widget vas être appliqué. Il faut donc que sa valeur corresponde au paramètre type au dessus de la zone de code.

data-subtype::
	cette attribut permet de stocker le sous-type de la commande sur laquelle le widget vas être appliqué. Il faut donc que sa valeur corresponde au paramètre sous-type au dessus de la zone de code.

data-cmd_id:: 
	Cet attribut prend comme valeur le Tag \#id#. Il est utilisé par Jeedom pour la mise à jour du Dashboard.

A partir de là, on a une base qui correspond au standard Jeedom. C'est le code minimaliste qu'il faut pour avoir un widget qui respecte la charte/règle Jeedom

IMPORTANT: Ne pas oublier de modifier l'attribut data-type et data-subtype si vous modifiez ces valeur dans la config du widget.

====== CSS Code
Cette partie qui vient s'ajouter entre les 2 balises "style", permet de déclarer des règles de mise en forme.
Cette partie est facultative car on peut ajouter les mises en forme directement dans l'attribut style d'une balise ou à l'aide de JavaScript.
L'utilisation de cette partie est donc une question de préférence pour bien séparer le HTML et le CSS

WARNING: Tout code déclaré dans des balises style, s'applique à toute la page. Il faut donc bien faire attention au sélecteur CSS que vous choisissez d'utiliser pour ne pas altérer les autres widgets.

Afin de ne pas impacter d'autres widgets involontairement par le code CSS que vous allez y mettre, je vous conseille d'utiliser le sélecteur id qui cible votre widget.

Exemple, si je veux mettre en rouge le texte situé dans la balise "Span", on aurait tendance à écrire :

. Code im Tag Style einfügen
[source,CSS]
----
span{
	color: red;
}
----

Aber dies würde die Textfarbe, alles was im Span-Tag steht, der Seite ändern.
Donc pour éviter cela, ajouter un sélecteur id qui vise votre widget pour délimiter son action :

.Code mis dans la balise Style et délimité
[source,CSS]
----
.Doc-#id# span{
	color: red;
}
----
Indem zusätzlich .Doc-\#id# zum span Selektor hinzugefügt wird, werden die Veränderung auf unser Widget begrenzt.

====== JavaScript Code
Das JavaScript beginnt zwischen den "Script'" Tags. JavaScript wird verwendet, um Berechnungen zu machen, Daten zu konvertieren, das Widget zu animieren, das Widget zu formatieren, auf dem Widget je nach Ereignissen Aktionen zu realisieren. 
En plus du JavaScript de base, Jeedom intègre par défaut plusieurs Frameworks qui permettent de simplifier le code JavaScript. On peut donc utiliser sans les initialiser :

* Jquery
* Jquery UI
* Bootstrap

WARNING: En cas d'erreur dans le code JS, cela peut bloquer tous les codes JS qui pourraient suivre, que ce soit dans le widget ou d'autres widgets. Il faut donc être prudent lors des modifications.

TIP: Si après avoir enregistré une modification de widget, la roue crantée contenue à tourner indéfiniment, il se peut que vous ayiez fait une erreur JS qui fais planter la suite de l'exécution JS sur la page.
Pour pouvoir corriger il vous suffit de passer la div id=jqueryLoadingDiv en display none  à l'aide de la console du navigateur, corriger le code et enregistrer. Il faut aussi faire F5 pour actualiser la page.



==== Les tags Jeedom
Dans Jeedom vous rencontrerez souvent les tags qui sont des noms entourer de "#". Le principe de fonctionnement de ces tags est simple : Jeedom vas les remplacer par la valeur qui correspond au tag.
Les Tags sont des sortes de variables (boîtes) dans lesquelles sont stockées des valeurs que l'on ne connait pas au moment où l'on écrit le code. C'est un peu comme si l'on faisait un texte avec des blancs pour y mettre plus tard des mots qui donneraient un sens variable au texte.

Tous les tags ne sont pas disponibles avec tous les types de commande, voici donc la liste et leur détail :

.Tag Commun au type action et info
\#id#::
ID de la commande créé par Jeedom à la création de la commande (valeur numérique unique).
+
----
Verwenden als Text, JS oder in den HTML-Attributen
----

\#logicalId#::
Logische ID des Befehls (kann leer sein). 
+
----
Zur Verwendung als Text oder in JS
----

\#name#::
Befehlsname
+
----
Zur Verwendung als Text oder in JS
----

\#name_display#::
Nom de la commande. A utiliser pour l'affichage du nom de la commande au niveau du widget.
+
----
Zur Verwendung als Text oder in JS
----

\#hideCmdName#::
Vide si le nom de la commande doit être affiché. Et "display:none;" si le nom de la commande ne doit pas être affiché.
+
----
A utiliser dans les attributs HTML style (CSS)
----

\#maxValue#::
Valeur maximale que peut prendre la commande.
+
----
Verwenden als Text, JS oder in den HTML-Attributen
----

.Tag, für den Typ Aktion
\#valueName#::
Nom de la commande info liée, si la commande action est liée à une commande info, nom de la commande action sinon. 
+
----
Zur Verwendung als Text oder in JS
----

\#lastValue#::
Letzter Wert des Befehls (kann leer sein).
+
----
Zur Verwendung als Text oder in JS
----

.Tag, für den Typ Info

\#unite#::
Unité de la commande
+
----
Zur Verwendung als Text oder in JS
----

\#collectDate#::
Retourne la date et heure de la dernière mise à jour du widget au format "yyyy-mm-dd hh:mn:ss"
+
----
Verwenden als Text, Js, oder im Titel  Attribut 
----

\#state#::
Valeur de la commande 
+
----
Zur Verwendung als Text oder in JS
----

\#displayHistory#::
Permet de prendre en compte l'option "Afficher les statistiques sur les widgets" dans le menu "Général"=>"Administration"=>"Configuration" onglet "Configuration des commandes". Si l'option est sur oui, le tag retournera un vide sinon 'display : none;'
+
----
A utiliser dans l'attribut "style" d'une balise html à afficher si l'historisation est activée dans la config Jeedom  
----

\#averageHistoryValue#::
Valeur moyenne sur les x dernières heures de la commande
+
----
Zur Verwendung als Text oder in JS
----

\#minHistoryValue#::
Minimum sur les x dernières heures de la commande
+
----
Zur Verwendung als Text oder in JS
----

\#maxHistoryValue#::
Maximum sur les x dernières heures de la commande
+
----
Zur Verwendung als Text oder in JS
----

\#tendance#::
Permet si l'historique de la valeur est activé de retourner les class : 'fa fa-minus', 'fa fa-arrow-up' ou 'fa fa-arrow-down' (icone trait, flèche bas, flèche haut), liées à la tendance de la valeur
+
----
A utiliser dans l'attribut "class" d'une balise "i"
----

\#history#::
Permet si l'historique de la valeur est activé de retourner les class : 'history cursor' (Voir les class CSS Jeedom), sinon il sera remplacé par un vide. Le tag permet donc d'afficher ou non le graphique d'historique sur le dashboard.
+
----
A utiliser dans l'attribut "class" de la div principale 
----

.Beispiel für Wertrückgabe
image::../images/capture031.png[]
==== Die Jeedom CSS-Klasse 

cmd:: Muss unbedingt zum Attribut "class" des Hauptdiv hinzugefügt werden, diese Klasse ermöglicht die Aktualisierung des Widgets. Ohne diese Klasse aktualisiert sich das Widget nur durch Aktualisieren der Seite.

cmd-widget:: cette class est recommandée car elle permet d'ajouter quelques paramètres CSS par défaut au widget pour un bon comportement.

cursor:: Ermöglicht den Mauszeiger zu ändern

history:: Cette class permet de modifier le pointeur en main, et lors du clic d'afficher l'historique de la valeur du widget.

tooltips:: C'est pour le title d'un élément au lieu d'être jaune il devient noir translucide avec le texte en blanc



////

Das Prinzip des Widget-Code ist relativ einfach, es funktioniert durch ersetzen von "Tags" in der Widget-Erzeugung, hier ist eine Liste von "Tags" :


- Info
* \#id# => ID der Befehle
* \#logicalId# => Logische ID des Befehls (kann leer sein)
* \#name# => Befehlsname
* \#name_display# => Befehlsname und leer, wenn der Name des Befehls nicht angezeigt werden soll
* \#unite# => Befehlseinheit
* \#collectDate# => Genaues Datum oder den Wert des Befehls
* \#state# => Wert des Befehls 
** Wenn der Befehl binär ist, kann der Zustand "grün" oder "rot" sein
* \#displayHistory# => Wenn der Befehl archiviert wird, dann ist der Wert '' sinon 'display : none;'
* \#averageHistoryValue# => Mittelwert der x letzten Stunden des Befehles
* \#minHistoryValue# => Minimum in den letzten x Stunden des Befehls
* \#maxHistoryValue# =>Maximum in den letzten x Stunden des Befehls
* \#tendance# =>Trend ist 'Fa Fa-Minus', 'Fa Fa-Pfeil nach oben' oder 'Fa Fa-Pfeil-unten'
* \#minValue# => Minimalwert, den der Befehl annehmen kann
* \#maxValue# => Maximalwert, den der Befehl annehmen kann
* \#history# => si la commande est historisée historize vaudra : 'history cursor' et le widget 'jeedom.cmd.info.history.default' sera ajouté (pour permettre d'afficher l'historique)
* \#hideCmdName# => Vide si le nom de la commande doit être affiché. Et "display:none;" si le nom de la commande ne doit pas être affiché.

- Aktion
* \#id# => ID der Befehle
* \#logicalId# => Logische ID des Befehls (kann leer sein)
* \#name# => Befehlsname
* \#name_display# => Befehlsname und leer, wenn der Name des Befehls nicht angezeigt werden soll
* \#valueName# => Nom de la commande info, si la commande action est liée à une commande info, nom de la commande action sinon. Vide si le nom de la commande ne doit pas être affiché
* \#lastValue# => Letzter Wert der Befehls (kann leer sein)  
* \#minValue# => Minimaler Wert den der Befehl annehmen kann
* \#maxValue# => Maximaler Wert den der Befehl annehmen kann
* \#hideCmdName# => Vide si le nom de la commande doit être affiché. Et "display:none;" si le nom de la commande ne doit pas être affiché.

* Pour que l'action soit exécutée il faut appeler la fonction : jeedom.cmd.execute(ID,options) avec
** ID => ID der Befehle
** options => Objekt, das die Befehlsoptionen enthält,

** Beispiel für einen Schieberegler Typ :
    jeedom.cmd.execute({id :'#id#', value : {slider : 30}})

** Beispiel für ein Farbtyp-Befehl :
     jeedom.cmd.execute({id :'#id#', { color: '#000000'}})

Das Plugin macht es einfach, ändern Sie die Rendering-Befehle, um ihr Armaturenbrett genau so wie gewünscht einzustellen.
////